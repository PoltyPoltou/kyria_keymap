/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "french.h"
// Layers numbers
#define DEVELOP 0
#define AZERTY 1
#define GAMING 2
#define SYMBOL 3
#define FR 4
#define NAV 5
#define ALT_TAB_NAV 6
#define KEYPAD 7
#define SYS 8

// keys numbers per row and side
#define LR0 0 1 2 3 4 5
#define LR1 12 13 14 15 16 17
#define LR2 24 25 26 27 28 29 30 31
#define LTHUMBS 40 41 42 43 44
#define LEFT_KEYS LR0 LR1 LR2 LTHUMBS

#define RR0 6 7 8 9 10 11
#define RR1 18 19 20 21 22 23
#define RR2 32 33 34 35 36 37 38 39
#define RTHUMBS 45 46 47 48 49
#define RIGHT_KEYS RR0 RR1 RR2 RTHUMBS

&sk {
    release-after-ms = <1000>;
    quick-release;
    ignore-modifiers;
};

&sl {
    release-after-ms = <3000>;
};

/ {

    behaviors {
        maj_space: maj_space{
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&kp FR_UNDS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        // thanks https://github.com/urob/zmk-config#timeless-homerow-mods
        lhrm: lhrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
	    require-prior-idle-ms = <150>;
	    hold-trigger-key-positions = <RIGHT_KEYS>;
	    hold-trigger-on-release;
        };
        rhrm: rhrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
	    require-prior-idle-ms = <150>;
	    hold-trigger-key-positions = <LEFT_KEYS>;
	    hold-trigger-on-release;
        };
        accent_ht: accent_ht {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
        circ_ht: circ_ht {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&trema>, <&circ>;
        };
        cust_mt: cust_mt {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
        };
        cust_ht: cust_ht {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
        tog_ht: tog_ht {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&tog>, <&tog>;
        };
        td_caps: td_caps {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp LSHIFT>, <&caps_word>;
        };
        td_quotes: td_quotes {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp FR_QUOT>, <&kp FR_DQUO>;
        };
        combos {
            compatible = "zmk,combos";
            cut {
                timeout-ms = <100>;
                key-positions = <26 28>;
                bindings = <&kp LC(FR_X)>;
                layers = <AZERTY DEVELOP>;
            };
            copy {
                timeout-ms = <100>;
                key-positions = <26 27>;
                bindings = <&kp LC(FR_C)>;
                layers = <AZERTY DEVELOP>;
            };
            paste {
                timeout-ms = <100>;
                key-positions = <27 28>;
                bindings = <&kp LC(FR_V)>;
                layers = <AZERTY DEVELOP>;
            };
            enter {
                timeout-ms = <25>;
                key-positions = <3 4>;
		require-prior-idle-ms = <200>;
                bindings = <&kp ENTER>;
                layers = <AZERTY DEVELOP>;
            };
        };
    };
    macros {
        trema: trema {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            wait-ms = <0>;
            tap-ms = <20>;
            bindings
                = <&kp FR_DIAE>,
                <&macro_param_1to1>,
                <&kp MACRO_PLACEHOLDER>;
        };
        circ: circ {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            wait-ms = <0>;
            tap-ms = <20>;
            bindings
                = <&kp FR_CIRC>,
                <&macro_param_1to1>,
                <&kp MACRO_PLACEHOLDER>;
        };
        not_dead: not_dead {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            wait-ms = <0>;
            tap-ms = <20>;
            bindings
                = <&macro_param_1to1>,
                <&kp MACRO_PLACEHOLDER>,
                <&kp SPACE>;
        };
        nav_macro: nav_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <20>;
            bindings
                = <&macro_press &mo NAV>,
                <&macro_pause_for_release>,
                <&macro_release &kp LALT &mo NAV &mo ALT_TAB_NAV>;
        };
        tog_alt_nav: tog_alt_nav {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            wait-ms = <10>;
            tap-ms = <20>;
            bindings
                = <&macro_press &kp LALT>,
                <&macro_param_1to1>,
                <&macro_tap &kp MACRO_PLACEHOLDER>,
                <&macro_press &mo ALT_TAB_NAV>;
        };
    };
    keymap {
        compatible = "zmk,keymap";

        DEVELOP_layer {
            bindings = <
            &kp ESC &accent_ht FR_AGRV FR_A &kp FR_Z &kp FR_E &kp FR_R &kp FR_T                                  &kp FR_Y &accent_ht FR_UGRV FR_U &kp FR_I &kp FR_O &kp FR_P &cust_ht FR_BSLS FR_SLSH
            &kp TAB &lhrm LGUI FR_Q &lhrm LALT FR_S &lhrm LSHIFT FR_D &lhrm LCTRL FR_F &kp FR_G             &kp FR_H &rhrm RCTRL FR_J &rhrm RSHIFT FR_K &rhrm LALT FR_L &rhrm RGUI FR_M &kp FR_COLN
            &td_caps &kp FR_W &kp FR_X &kp FR_C &kp FR_V &kp FR_B &kp CAPS &none             &kp DEL &kp PRINTSCREEN &kp FR_N &kp FR_COMM &kp FR_SCLN &kp FR_DQUO &cust_ht FR_SCLN FR_DOT &cust_ht FR_QUES FR_EXLM
            &tog_ht GAMING AZERTY &none &sk LSHIFT &maj_space &nav_macro                               &mo SYMBOL &cust_mt FR BSPC &none &none &mo SYS          >;

            sensor-bindings = <&inc_dec_kp DOWN UP &inc_dec_kp RIGHT LEFT>;

        };

        AZERTY_layer {
            bindings = <
            &trans &trans &trans &trans &trans &trans                                   &trans &trans &trans &trans &trans &trans
            &trans &trans &trans &trans &trans &trans                                   &trans &trans &trans &trans &trans &cust_ht FR_COLN FR_COMM
            &trans &trans &trans &trans &trans &trans &trans &trans      &trans &trans &trans &kp FR_EACU &kp FR_EGRV &td_quotes &trans &trans
                            &trans &trans &trans &trans &trans           &trans &trans &trans &trans &trans
            >;
            sensor-bindings = <&inc_dec_kp DOWN UP &inc_dec_kp RIGHT LEFT>;

        };

        GAMING_layer {
            bindings = <
            &kp ESC &kp FR_T &kp FR_A &kp FR_Z &kp FR_E &kp FR_R                                   &kp FR_Y &kp FR_U &kp FR_I &kp FR_O &kp FR_P &not_dead FR_CIRC
            &kp TAB &kp LSHIFT &kp FR_Q &kp FR_S &kp FR_D &kp FR_F              &kp FR_H &kp FR_J &kp FR_K &kp FR_L &kp FR_M &kp FR_HASH
            &kp FR_T &kp LCTRL &kp FR_W &kp FR_X &kp FR_C &kp FR_V &trans &kp LALT             &kp DEL &kp PRINTSCREEN &kp FR_N &kp FR_COMM &kp FR_SCLN &td_quotes &kp FR_DOT &cust_ht FR_QUES FR_EXLM
            &to 0 &kp LCTRL &kp LSHIFT &kp SPACE &trans                                   &trans &trans &trans &trans &to 0
            >;
            sensor-bindings = <&inc_dec_kp DOWN UP &inc_dec_kp RIGHT LEFT>;
        };

        SYMBOL_layer {
            bindings = <
            &tog KEYPAD &kp FR_AT &kp FR_LABK &kp FR_LPRN &kp FR_RPRN &kp FR_RABK                                                    &kp FR_PIPE &kp FR_LBRC &kp FR_RBRC &kp FR_ASTR &kp FR_PERC &not_dead FR_CIRC
            &kp FR_EURO &kp FR_HASH &lhrm LALT FR_DLR &lhrm LSHIFT FR_MINS &lhrm LCTRL FR_UNDS &kp FR_LCBR                    &kp FR_RCBR &rhrm RCTRL FR_EQL &rhrm RSHIFT FR_PLUS &rhrm LALT FR_AMPR &kp FR_QUOT &not_dead FR_GRV
            &kp FR_COMM &kp FR_1 &kp FR_2 &kp FR_3 &kp FR_4 &kp FR_5 &trans &trans                                                       &trans &trans &kp FR_6 &kp FR_7 &kp FR_8 &kp FR_9 &kp FR_0 &kp FR_TILD
            &trans &trans &trans &trans &trans                                                                                      &trans &trans &trans &trans &trans
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_VOL_UP C_VOL_DN>;

        };

        FR_layer {
            bindings = <
            &none &circ_ht FR_A FR_A &none &circ_ht E E &none &none                &none &circ U &circ_ht I I &circ O &none &kp FR_CIRC
            &none &none &none &none &none &none 				   &none &none &none &none &none &cust_ht FR_COLN FR_COMM
            &none &none &none &kp FR_CCED &none &none &trans &trans    &trans &trans &none &kp FR_EACU &kp FR_EGRV &td_quotes &kp FR_DOT &cust_ht FR_QUES FR_EXLM
            &trans &trans &trans &trans &trans                                     &trans &trans &trans &trans &trans
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT &inc_dec_kp UP DOWN>;
        };

        NAV_layer {
            bindings = <
            &none &none &kp F1 &kp F2 &kp F3 &kp F4                                            &none &kp RCTRL &kp RSHIFT &kp LALT &none &kp C_PP
            &tog_alt_nav TAB &kp ENTER &lhrm LALT F5 &lhrm LSHIFT F6 &lhrm LCTRL F7 &kp F8           &kp LEFT &kp DOWN &kp UP &kp RIGHT &none &kp C_NEXT
            &tog_alt_nav LS(TAB) &sk LALT &kp F9 &kp F10 &kp F11 &kp F12 &trans &trans                                &trans &trans &kp HOME &kp PG_DN &kp PG_UP &kp END &none &kp C_PREV
            &trans &trans &trans &trans &trans                                                      &trans &trans &trans &trans &trans
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT &inc_dec_kp RIGHT LEFT>;
        };

        ALT_TAB_NAV_layer {
            bindings = <
            &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
            &kp TAB &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
            &kp LS(TAB) &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
            &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT &inc_dec_kp RIGHT LEFT>;
        };

        KEYPAD_layer {
            bindings = <
            &tog KEYPAD &none &none &none &kp FR_SLSH &kp KP_MULTIPLY                                     &none &kp KP_N7 &kp KP_N8 &kp KP_N9 &none &kp KP_NUMLOCK
            &none &none &kp LALT &kp LSHIFT &mt LCTRL FR_MINS &kp FR_PLUS                           &none &rhrm LCTRL KP_N4 &rhrm RSHIFT KP_N5 &rhrm LALT KP_N6 &none &none
            &none &none &none &none &kp FR_COMM &kp FR_DOT &trans &trans                                 &trans &trans &none &kp KP_N1 &kp KP_N2 &kp KP_N3 &none &none
            &trans &trans &trans &trans &trans                                                  &trans &trans &kp KP_N0 &kp KP_N0 &kp KP_N0
            >;

            sensor-bindings = <&inc_dec_kp C_AL_PREV_TASK C_AL_NEXT_TASK &inc_dec_kp PG_UP PG_DN>;
        };
        SYS_layer {
            bindings = <
            &bt BT_CLR &none &none &none &none &bt BT_SEL 0                     &bt BT_SEL 3 &none &none &none &none &none
            &none &none &none &none &none &bt BT_SEL 1                          &bt BT_SEL 4 &none &none &none &none &none
            &out OUT_TOG &none &none &none &none &bt BT_SEL 2 &trans &bootloader     &bootloader &trans &bt BT_SEL 5 &none &none &none &none &none
            &trans &trans &trans &trans &sys_reset                                  &sys_reset &trans &trans &trans &trans
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT &inc_dec_kp UP DOWN>;
        };
    };
};
